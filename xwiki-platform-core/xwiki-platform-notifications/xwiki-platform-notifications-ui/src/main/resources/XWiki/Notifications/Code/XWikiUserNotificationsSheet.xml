<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.Notifications.Code.XWikiUserNotificationsSheet" locale="">
  <web>XWiki.Notifications.Code</web>
  <name>XWikiUserNotificationsSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1488292213000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1488297950000</date>
  <contentUpdateDate>1488296825000</contentUpdateDate>
  <parent>XWiki.Notifications.Code.WebHome</parent>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{template name="locationPicker_macros.vm" /}}

{{velocity}}
#set ($discard = $xwiki.jsx.use('XWiki.Notifications.Code.XWikiUserNotificationsSheet'))
#set ($discard = $xwiki.ssx.use('XWiki.Notifications.Code.XWikiUserNotificationsSheet'))
## TODO: replace by $xwiki.sswx.use() or something like this when XWIKI-12788 is closed.
#set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-switch', 'css/bootstrap3/bootstrap-switch.min.css'), {'type': 'text/css', 'rel': 'stylesheet'}))

(% class="profile-section highlighted-profile-section notification-top-panel" %)
(((
{{html clean="false"}}
&lt;h2&gt;$services.localization.render('notifications.settings.preferences')&lt;/h2&gt;
&lt;div class="xform"&gt;
  &lt;p class="xHint"&gt;$services.localization.render('notifications.settings.preferences.hint')&lt;/p&gt;
&lt;/div&gt;
&lt;div class="notification-top-panel-preferences"&gt;
  &lt;div class="xform col-xs-6"&gt;
    &lt;dl&gt;
      &lt;dt class="label"&gt;&lt;label&gt;$services.localization.render('notifications.rss.feedLink')&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href="$xwiki.getURL('XWiki.Notifications.Code.NotificationRSSService', 'get', 'outputSyntax=plain')" id="notificationsRssLink" target="_blank" title="$services.localization.render('notifications.rss.feedLink')"&gt;
          &lt;span class="fa fa-rss"&gt;&lt;/span&gt;&amp;nbsp;$services.localization.render('notifications.rss.feedLinkDescription')
        &lt;/a&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/div&gt;
  &lt;div class="xform col-xs-6"&gt;
    &lt;dl&gt;
      &lt;dt class="label"&gt;&lt;label&gt;$services.localization.render('notifications.settings.email')&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        #if ($services.notification.areEmailsEnabled())
          #set ($interval = 'daily')
          #set ($objInterval = $doc.getObject('XWiki.Notifications.Code.NotificationEmailPreferenceClass'))
          #if ("$!objInterval" != '')
            #set ($interval = $objInterval.getValue('interval'))
          #end
          &lt;select class="notificationEmailInterval"&gt;
            &lt;option value="hourly" #if($interval == 'hourly')selected="selected"#end&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.NotificationEmailPreferenceClass_interval_hourly'))&lt;/option&gt;
            &lt;option value="daily"  #if($interval == 'daily')selected="selected"#end&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.NotificationEmailPreferenceClass_interval_daily'))&lt;/option&gt;
            &lt;option value="weekly" #if($interval == 'weekly')selected="selected"#end&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.NotificationEmailPreferenceClass_interval_weekly'))&lt;/option&gt;
            &lt;option value="live" #if($interval == 'live')selected="selected"#end&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.NotificationEmailPreferenceClass_interval_live'))&lt;/option&gt;
          &lt;/select&gt;
        #end
      &lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/div&gt;
&lt;/div&gt;
{{/html}}
)))
(% class="profile-section highlighted-profile-section" %)
(((
{{html clean="false"}}
&lt;h2&gt;$services.localization.render('notifications.settings.title')&amp;nbsp;&lt;small&gt;&lt;a id="notificationsRssLink" title="$services.localization.render('notifications.rss.feedLink')" target="_blank" href="$xwiki.getURL('XWiki.Notifications.Code.NotificationRSSService', 'get', 'outputSyntax=plain')"&gt;$services.icon.renderHTML("rss")&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;
&lt;table class="notifPreferences"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="width: 250px;"&gt;&lt;/th&gt;
      &lt;th&gt;$escapetool.xml($services.localization.render('notifications.settings.menu'))&lt;/th&gt;
      #set ($colsCount = 2)
      #if ($services.notification.areEmailsEnabled())
        &lt;th&gt;$escapetool.xml($services.localization.render('notifications.settings.email'))&lt;/th&gt;
        #set ($colsCount = 3)
      #end
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  ##
  ## Get all event types and group them by applications
  ##
  #set ($types = [])
  #foreach ($descriptor in $services.eventstream.getRecordableEventDescriptors($xcontext.isMainWiki()))
    #set ($discard = $types.add({
      'applicationName' : "$!services.localization.render($descriptor.applicationName)",
      'applicationIcon' : "$!services.icon.renderHTML($descriptor.applicationIcon)",
      'description'     : "$!services.localization.render($descriptor.description)",
      'eventType'       : "$!descriptor.eventType",
      'filter'          : "$!descriptor.filter",
      'applicationId'   : "$!descriptor.applicationId"
    }))
  #end
  #set ($apps = [])
  #set ($lastAppId = '')
  #foreach ($type in $sorttool.sort($types, ['applicationName', 'eventType']))
    #if ($lastAppId != $type.applicationId)
      #set ($lastAppId = $type.applicationId)
      #set ($lastApp = [])
      #set ($discard = $apps.add($lastApp))
    #end
    #set ($discard = $lastApp.add($type))
  #end
  ##
  ## Display all applications
  ##
  #set ($appClass = "appOdd")
  #foreach ($app in $apps)
    #set ($type = $app[0])
    &lt;tbody class="applicationElem $appClass" data-applicationid="$escapetool.xml($type.applicationId)"&gt;
      ##
      ## Display the application row
      ##
      &lt;tr&gt;
        ## Application Name and Icon
        &lt;th style="vertical-align: top;"&gt;
          $type.applicationIcon $escapetool.xml($type.applicationName)
        &lt;/th&gt;
        ## Alert switch
        &lt;td class="notificationAppCell loading" data-format="alert"&gt;
          &lt;input type="checkbox" class="notificationAppCheckbox hidden"/&gt;
        &lt;/td&gt;
        ## Email switch
        #if ($services.notification.areEmailsEnabled())
          &lt;td class="notificationAppCell loading" data-format="email"&gt;
            &lt;input type="checkbox" class="notificationAppCheckbox hidden"/&gt;
          &lt;/td&gt;
        #end
        ## Collapse button
        &lt;td&gt;
          &lt;button class="btn btn-default btn-sm collapseButton"&gt;$services.icon.renderHTML('caret-down')&lt;/button&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      ##
      ## Display all events of this application
      ##
      #foreach($type in $app)
        &lt;tr class="rowEventType hidden" data-eventtype="$type.eventType"&gt;
          &lt;td&gt;$escapetool.xml($type.description)&lt;/td&gt;
          #displayPreference($type, 'alert')
          #if ($services.notification.areEmailsEnabled())
            #displayPreference($type, 'email')
          #end
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
      #end
    &lt;/tbody&gt;
    #if ($appClass == 'appOdd')
      #set ($appClass = 'appEven')
    #else
      #set ($appClass = 'appOdd')
    #end
  #end
&lt;/table&gt;
{{/html}}
)))
#**
 * Display a preference button for an event type and a given format
 *#
#macro(displayPreference $type $format)
  #set ($checked = '')
  #set ($preference = '')
  #foreach ($pref in $doc.getObjects('XWiki.Notifications.Code.NotificationPreferenceClass'))
    #if (($pref.getValue('format') == $format || ($format == 'alert' &amp;&amp; "$!pref.getValue('format')" == '')) &amp;&amp; $pref.getValue('eventType') == $type.eventType)
      #set ($preference = $pref)
      #if ($pref.getValue('notificationEnabled') == 1)
        #set ($checked = 'checked="checked"')
      #end
    #end
  #end
    &lt;td class="notificationTypeCell loading" data-eventtype="$!escapetool.xml($type.eventType)" data-format="$format" data-objnumber="$!preference.number" data-filter="${type.filter}"&gt;
    &lt;div class="hidden"&gt;
      &lt;input type="checkbox" class="notificationTypeCheckbox" $checked/&gt;
      #if ($type.filter == 'WIKI_FILTER' || $type.filter == 'WIKI_AND_SPACE_FILTER' || $type.filter == 'WIKI_SPACE_AND_DOCUMENT_FILTER')
        #displayScopeLivetable($type.eventType, $type.filter, $format)
      #elseif($type.filter == 'CUSTOM_FILTER')
        ## TODO: handle UIX from other wikis
        $services.uix.getExtensions('notification.profile.filter', {'select': $type.eventType})
      #end
    &lt;/div&gt;
  &lt;/td&gt;
#end
#**
 * Add a button to see the scope livetable in a modal box
 *#
#macro(displayScopeLivetable $eventType $filterType $format)
  &lt;div class="notificationPreferenceScopeContainer"&gt;
    #set ($count = 0)
    #foreach ($obj in $doc.getObjects('XWiki.Notifications.Code.NotificationPreferenceScopeClass'))
      #set ($objFormat = $obj.getValue('format'))
      #if ("$!objFormat" == '')
        #set ($objFormat = 'alert')
      #end
      #if ($obj.getValue('eventType') == $eventType &amp;&amp; $format == $objFormat)
        #set ($count = $count + 1)
      #end
    #end
    #set ($showTerminalDocuments = ($filterType == 'WIKI_SPACE_AND_DOCUMENT_FILTER'))
    &lt;p&gt;
      &lt;button class="btn btn-xs btn-default filterButton" data-target="#modal-${eventType}-${format}" data-toggle="modal"&gt;
        $services.localization.render('notifications.settings.filters', ["&lt;span class='notificationPreferenceScopeCount'&gt;$count&lt;/span&gt;"])
      &lt;/button&gt;
    &lt;/p&gt;
    &lt;div class="modal fade" tabindex="-1" role="dialog" id="modal-${eventType}-${format}"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content"&gt;
          &lt;div class="modal-header"&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;&lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;
            &lt;h4 class="modal-title"&gt;Filters&lt;/h4&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            #set($collist  = ['scope', 'location', 'scopeFilterType', '_actions'])
            #set($colprops = {
              'scope':          { 'sortable': false, 'html': true},
              'location':       { 'sortable': false, 'html': true },
              'scopeFilterType':{ 'sortable': true},
              '_actions':       { 'sortable': false, 'actions': ['delete']}
            })
            #set($options  = {
              'resultPage'        : 'XWiki.Notifications.Code.NotificationPreferenceScopeLivetableResults',
              'rowCount'          : 10,
              'description'       : 'This table lists all watched elements.',
              'translationPrefix' : 'notifications.preferences.scope.table.',
              'extraParams'       : "eventType=${eventType}&amp;format=${format}&amp;user=${services.model.serialize($doc.documentReference, 'default')}",
              'outputOnlyHtml'    : true
            })
            #livetable("notificationPreferenceScopeContainer-${eventType}-${format}" $collist $colprops $options)
            &lt;p&gt;&lt;button class="btn btn-primary btn-addfilter"&gt;$escapetool.xml($services.localization.render('notifications.settings.addFilter'))&lt;/button&gt;&lt;/p&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;Close&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;&lt;!-- /.modal-content --&gt;
      &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;
    &lt;/div&gt;&lt;!-- /.modal --&gt;
    ## TODO: handle properly the "WIKI" filter with a wiki picker instead
    ## TODO: add an option so the user can select a page without its children
    ## Note: we put the picker modal here to avoid having a modal in a modal (nested modals ;))
    &lt;div class="modal fade" tabindex="-1" role="dialog" id="modal-add-filter-scope-${eventType}-${format}"&gt;
      &lt;div class="modal-dialog" role="document"&gt;
        &lt;div class="modal-content"&gt;
          &lt;div class="modal-header"&gt;
            &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;&lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;
            &lt;h4 class="modal-title"&gt;$escapetool.xml($services.localization.render('notifications.settings.addFilter'))&lt;/h4&gt;
          &lt;/div&gt;
          &lt;div class="modal-body"&gt;
            &lt;form class="xform"&gt;
              &lt;dl class="location-picker"&gt;
                &lt;dt&gt;
                  &lt;label for="notificationFilterTypeSelector-${eventType}-${format}"&gt;$escapetool.xml($services.localization.render('notifications.filters.type.label'))&lt;/label&gt;
                  &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.filters.type.hint'))&lt;/span&gt;
                &lt;/dt&gt;
                &lt;dd&gt;
                  &lt;select id="notificationFilterTypeSelector-${eventType}-${format}" name="notificationFilterTypeSelector" size="1"&gt;
                    &lt;option value="inclusive" selected="selected"&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.NotificationPreferenceScopeClass_scopeFilterType_inclusive'))&lt;/option&gt;
                    &lt;option value="exclusive"&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.NotificationPreferenceScopeClass_scopeFilterType_exclusive'))&lt;/option&gt;
                  &lt;/select&gt;
                &lt;/dd&gt;
                &lt;dt&gt;
                  &lt;label&gt;$escapetool.xml($services.localization.render('notifications.filters.location.label'))&lt;/label&gt;
                  &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.filters.location.hint'))&lt;/span&gt;
                &lt;/dt&gt;
                &lt;dd class="document-tree"&gt;
                  #documentTree({
                    'class': 'location-tree',
                    'finder': true,
                    'showAttachments': false,
                    'showRoot': false,
                    'showTerminalDocuments': true,
                    'showTranslations': false,
                    'showWikis': true
                  })
                &lt;/dd&gt;
              &lt;/dl&gt;
            &lt;/form&gt;
          &lt;/div&gt;
          &lt;div class="modal-footer"&gt;
            &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;$services.localization.render('notifications.filters.cancel')&lt;/button&gt;
            &lt;button type="button" class="btn btn-primary" disabled="disabled"&gt;$services.localization.render('notifications.filters.submit')&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;&lt;!-- /.modal-content --&gt;
      &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;
    &lt;/div&gt;&lt;!-- /.modal --&gt;
  &lt;/div&gt;
#end
{{/velocity}}
</content>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0f871729-5139-494d-a2ab-1ce903ff91b0</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>'use strict';
/**
 * Start the requirejs config.
 */
require.config({
  paths: {
    'bootstrap-switch': '$services.webjars.url('bootstrap-switch', 'js/bootstrap-switch.min')'
  },
  shim: {
    'bootstrap-switch' : ['jquery']
  }
});
/**
 * Start the real script.
 */
require(['jquery', 'xwiki-meta', 'ApplicationWidget', 'bootstrap', 'bootstrap-switch', 'xwiki-events-bridge'], function ($, xm, ApplicationWidget) {

  /**
   * Page initialization
   */
  $(document).ready(function() {

    var applications = [];

    // Create application widgets
    $('.applicationElem').each(function() {
      applications.push(new ApplicationWidget($(this)));
    });

    /**
     * Save the current settings
     */
    var save = function() {
      var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
      var data = [];
      for (var i = 0; i &lt; applications.length; ++i) {
        for (var j = 0; j &lt; applications[i].eventTypes.length; j++) {
          data.push({
            eventType: applications[i].eventTypes[j].eventType,
            format: 'alert',
            enabled: applications[i].eventTypes[j].getAlertState()
          });
          data.push({
            eventType: applications[i].eventTypes[j].eventType,
            format: 'email',
            enabled: applications[i].eventTypes[j].getEmailState()
          });
        }
      }
      var url = "$xwiki.getURL('XWiki.Notifications.Code.NotificationPreferenceService', 'get', 'outputSyntax=plain')";
      $.post(url, {
        action: 'savePreferences',
        json: JSON.stringify(data)
      }).done(function() {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
      }).error(function() {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
      });
    };

    /**
     * Several changes can be received very closely (for example, when several switches are updated in the same time),
     * so we save only the last received event.
     * For that we postpone the save action (300ms is clone enought for the user) and we cancel it if an other event
     * happens in the meantime.
     */
    var nextSave = 0;
    $(document).on('switchChange.bootstrapSwitch', function(event, state) {
      if (nextSave != 0) {
        clearTimeout(nextSave);
      }
      nextSave = setTimeout(save, 300);
    });

    // Disable the "loading" screens
    $('td.notificationTypeCell, td.notificationAppCell').each(function(){
      $(this).find('.hidden').removeClass('hidden');
      $(this).removeClass('loading');
    });

    /**
     * Handle the livetable 'delete' action
     */
    var handleFilterLivetableDelete = function (event) {
      event.preventDefault();
      var link = $(this);
      var livetable = window['livetable_' + link.parents('.xwiki-livetable').attr('id')];
      var filter = $(this).parents('.notificationPreferenceScopeContainer').parent().find('.notificationPreferenceScopeCount');
      // Ask a confirmation
      new XWiki.widgets.ConfirmationBox({
        onYes: function() {
          // Delete on confirmation
          // This is done thanks to a REST URL with the "delete" action
          $.ajax(link.attr('href'), {
            type: 'DELETE'
          }).done(function() {
            // Reload the livetable
            livetable.refresh();
            filter.text(parseInt(filter.text()) - 1);
          });
        }
      });
      // Avoid conflict between bootstrap and XWiki modals
      $('.xdialog-modal-container').css('z-index', 100000);
    };
    $(document).on('xwiki:livetable:newrow', function (event, data) {
      $(data.row).find('a.actiondelete').click(handleFilterLivetableDelete);
    });
    $('.notificationPreferenceScopeContainer .xwiki-livetable a.actiondelete').click(handleFilterLivetableDelete);

    /**
     * Handle the notification email interval
     */
    $('.notificationEmailInterval').change(function () {
      var intervalSelect = $(this);
      var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
      var serviceURL = new XWiki.Document(XWiki.Model.resolve('XWiki.Notifications.Code.NotificationPreferenceService', XWiki.EntityType.DOCUMENT)).getURL('get', 'outputSyntax=plain');
      $.post(serviceURL, {
        'interval': intervalSelect.val()
      }).done(function (data) {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
      });
    });

    /**
     * Disable the "loading" screens
     */
    $('td.notificationTypeCell').each(function(){
      $(this).find('&gt; div.hidden').removeClass('hidden');
      $(this).removeClass('loading');
    });

  });
});
</code>
    </property>
    <property>
      <name>JS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a0f40a59-e61d-46b0-9c37-bea6331cec7a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('EventTypeWidget', ['jquery', 'EventTypeFilter', 'xwiki-meta', 'bootstrap-switch'], function($, EventTypeFilter, xm) {
  /**
  * Construct an EventTypeWidget.
  */
  return function(domElement, application) {
    var self               = this;
    self.domElement        = domElement;
    self.application       = application;
    self.eventType         = domElement.attr('data-eventtype');
    self.cellAlert         = domElement.find('.notificationTypeCell[data-format="alert"]');
    self.cellEmail         = domElement.find('.notificationTypeCell[data-format="email"]');
    self.switchAlert       = self.cellAlert.find('.notificationTypeCheckbox');
    self.switchEmail       = self.cellEmail.find('.notificationTypeCheckbox');
    self.alertObjectNumber = self.cellAlert.attr('data-objnumber');
    self.emailObjectNumber = self.cellEmail.attr('data-objnumber');
    self.filterAlert       = new EventTypeFilter(self, 'alert');
    self.filterEmail       = new EventTypeFilter(self, 'email');

    /**
     * Initialization
     */
    self.init = function () {
      // Replace the 'hidden' class by a call to jQuery.hide();
      self.domElement.removeClass('hidden').hide();
      // Enable bootstrap switches
      $([self.switchAlert, self.switchEmail]).bootstrapSwitch({
        size: 'mini',
        labelText: '$escapetool.javascript($services.icon.renderHTML("bell"))'
      });
      // On change
      $(self.switchAlert).on('switchChange.bootstrapSwitch', function(event, state) {
        self.application.updateSwitches();
        self.filterAlert.setState(state);
        setTimeout(function() { self.save('alert', state); }, 1);
      });
      $(self.switchEmail).on('switchChange.bootstrapSwitch', function(event, state) {
        self.application.updateSwitches();
        self.filterEmail.setState(state);
        setTimeout(function() { self.save('email', state); }, 1);
      });
      // Set event filter widget state
      self.filterAlert.setState(self.getAlertState());
      self.filterEmail.setState(self.getEmailState());
    };

    /**
     * Get the state of the alert switch
     */
    self.getAlertState = function() {
      return self.switchAlert.bootstrapSwitch('state');
    };

    /**
     * Get the state of the email switch
     */
    self.getEmailState = function() {
      return self.switchEmail.bootstrapSwitch('state');
    };

    /**
     * Set the state of the alert switch
     */
    self.setAlertState = function (state) {
      self.switchAlert.bootstrapSwitch('state', state);
    };

    /**
     * Set the state of the email switch
     */
    self.setEmailState = function (state) {
      self.switchEmail.bootstrapSwitch('state', state);
    };

    /**
     * Hide/Show the event type widget
     */
    self.toggleVisibility = function () {
      self.domElement.toggle();
    };

    /**
     * Save the preference
     */
    self.save = function(format, state) {
      return;
      var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
      var cell = format == 'alert' ? self.cellAlert : self.cellEmail;
      var objNumber = cell.attr('data-objnumber');
      if (objNumber == '' &amp;&amp; state) {
        // If the object does not exist yet, create it
        var restURL = xm.restURL + '/objects?media=json';
        var params = {
          'className': 'XWiki.Notifications.Code.NotificationPreferenceClass',
          'property#format': format,
          'property#notificationEnabled': 1
        };
        params['property#eventType'] = self.eventType;
        $.post(restURL, params).done(function (data) {
          cell.attr('data-objnumber', data.number);
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
        }).fail(function () {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
        });
      } else if (objNumber != '') {
        // If the object already exist, just update its value
        var restURL = xm.restURL + '/objects/XWiki.Notifications.Code.NotificationPreferenceClass/' + objNumber
          + '/properties/notificationEnabled?media=json';
        $.ajax(restURL, {
          method: 'PUT',
          contentType: 'text/plain',
          data: state ? '1' : '0'
        }).done(function (data) {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
        }).fail(function () {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
        });
      }
    };

    // Call init
    self.init();
  };
});
</code>
    </property>
    <property>
      <name>Event Type Widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d0c80940-3537-47c3-9aa8-090e7bd74b57</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('ApplicationWidget', ['jquery', 'EventTypeWidget', 'bootstrap-switch'], function($, EventTypeWidget) {
  /**
   * Construct an application widget.
   */
  return function(domElement) {

    var self             = this;
    self.domElement      = domElement;
    self.applicationId   = domElement.attr('data-applicationid');
    self.cellAlert       = domElement.find('.notificationAppCell[data-format="alert"]');
    self.cellEmail       = domElement.find('.notificationAppCell[data-format="email"]');
    self.switchAlert     = self.cellAlert.find('.notificationAppCheckbox');
    self.switchEmail     = self.cellEmail.find('.notificationAppCheckbox');
    self.collapseButton  = domElement.find('.collapseButton');
    self.eventTypes      = [];

    /**
     * Initialization
     */
    self.init = function () {
      // Creates event type widgets for this application
      self.domElement.find('.rowEventType').each(function() {
        self.eventTypes.push(new EventTypeWidget($(this), self));
      });
      // Enable bootstrap switch.
      $([self.switchAlert, self.switchEmail]).bootstrapSwitch({
        size: 'small',
        labelText: '$escapetool.javascript($services.icon.renderHTML("bell"))'
      });
      // Set initial state for the switches
      self.updateSwitches();
      self.updateTypesOnChange = true;
      // Handle collapsing
      self.collapseButton.click(function() {
        for (var i = 0; i &lt; self.eventTypes.length; ++i) {
          self.eventTypes[i].toggleVisibility();
        }
      });
      // Handle switch change
      self.switchAlert.on('switchChange.bootstrapSwitch', function(event, state) {
        for (var i = 0; i &lt; self.eventTypes.length; ++i) {
          self.eventTypes[i].setAlertState(state);
        }
      });
      self.switchEmail.on('switchChange.bootstrapSwitch', function(event, state) {
        for (var i = 0; i &lt; self.eventTypes.length; ++i) {
          self.eventTypes[i].setEmailState(state);
        }
      });
    };

    /**
     * Set the switch states according to their event type
     */
    self.updateSwitches = function() {
      var allAlertsOn = true;
      var allAlertsOff = true;
      var allEmailsOn = true;
      var allEmailsOff = true;
      for (var i = 0; i &lt; self.eventTypes.length; ++i) {
        var eventType = self.eventTypes[i];
        allAlertsOn  &amp;=  eventType.getAlertState();
        allAlertsOff &amp;= !eventType.getAlertState();
        allEmailsOn  &amp;=  eventType.getEmailState();
        allEmailsOff &amp;= !eventType.getEmailState();
      }
      if (allAlertsOn) {
        self.switchAlert.bootstrapSwitch('state', true);
      } else if (allAlertsOff) {
        self.switchAlert.bootstrapSwitch('state', false);
      } else {
        self.switchAlert.bootstrapSwitch('indeterminate', true);
      }
      if (allEmailsOn) {
        self.switchEmail.bootstrapSwitch('state', true);
      } else if (allEmailsOff) {
        self.switchEmail.bootstrapSwitch('state', false);
      } else {
        self.switchEmail.bootstrapSwitch('indeterminate', true);
      }
    };

    // Call to init()
    self.init();
  };
});
</code>
    </property>
    <property>
      <name>Application Widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6a8f036c-8c5d-4307-8a17-fc9d732f0b79</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('EventTypeFilter', ['jquery', 'xwiki-meta', 'bootstrap', 'bootstrap-switch'], function($, xm) {
  /**
   * Construct an event type filter
   */
  return function(eventTypeWidget, format) {
    var self              = this;
    self.eventTypeWidget  = eventTypeWidget;
    self.format           = format;
    self.cell             = self.eventTypeWidget.domElement.find('.notificationTypeCell[data-format="'+format+'"]');
    self.filterType       = self.cell.attr('data-filter');
    self.container        = self.cell.find('.notificationPreferenceScopeContainer');
    self.button           = self.container.find('.filterButton');
    self.buttonAddFilter  = self.container.find('.btn-addfilter');
    self.livetableModal   = self.container.find('&gt; #modal-' + self.eventTypeWidget.eventType + '-' + self.format);
    self.pickerModal      = self.container.find('&gt; #modal-add-filter-scope-' + self.eventTypeWidget.eventType + '-' + self.format);
    self.filterTypeSelector = self.container.find('#notificationFilterTypeSelector-' + self.eventTypeWidget.eventType + '-' + self.format);

    /**
     * Initialization
     */
    self.init = function () {
      // Open the location picker
      self.buttonAddFilter.click(function() {
        self.pickerModal.modal('show');
        self.pickerModal.find('.location-tree').xtree();
        self.pickerModal.find('.modal-footer button.btn-primary').each(function() {
          $(this).prop('disabled', 'disabled');
        });
      });
      // Enable the "select" button when a selection is made on the tree.
      self.pickerModal.find('.location-tree').on('changed.jstree', function(e, data) {
        if (data.selected.length &gt; 0) {
          self.pickerModal.find('.modal-footer button.btn-primary').prop('disabled', '');
        }
      });
      // Callback called when the "select" button is clicked
      self.pickerModal.find('.modal-footer button.btn-primary').click(self.onSelectButtonClicked);
    };

    /**
     * Set the button is clickable or not
     */
    self.setState = function (state) {
      self.button.css('pointer-events', state ? 'auto' : 'none').css('opacity', state ? 1.0 : 0.4);
    };

    /**
     * On "select" button clicked
     */
    self.onSelectButtonClicked = function() {
      self.pickerModal.modal('hide');
      var tree = $.jstree.reference(self.pickerModal.find('.location-tree'));
      var nodes = tree.get_selected(true);
      for (var i = 0; i &lt; nodes.length; ++i) {
        var node = nodes[i];
        var scopeType = 'pageOnly';
        var reference = node.data.id;
        var scopeFilterType = self.filterTypeSelector.find('option:selected').val();
        if (node.data.type == 'wiki') {
          scopeType = 'wiki';
        } else if (node.data.type == 'document' &amp;&amp; node.data.id.match('WebHome$')) {
          scopeType = 'pageAndChildren';
          // Remove the "WebHome" part to match the space instead of the document
          reference = reference.substring(0, reference.length - '.WebHome'.length);
        }
        // Don't save a preference scope if we expect to have a wiki and the selected data is a page
        if (self.filterType == 'WIKI_FILTER' &amp;&amp; scopeType != 'wiki') {
          // TODO: would be even better if the picker was not suggesting pages...
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.errorFilterWiki'))", 'error');
          continue;
        }
        // Saving
        var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
        var restURL = xm.restURL + '/objects?media=json';
        $.post(restURL, {
          'className': 'XWiki.Notifications.Code.NotificationPreferenceScopeClass',
          'property#eventType': self.eventTypeWidget.eventType,
          'property#scopeReference': reference,
          'property#scope': scopeType,
          'property#format': self.format,
          'property#scopeFilterType': scopeFilterType
        }).done(function (data) {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
          // Reload the livetable
          window['livetable_' + self.container.find('.xwiki-livetable').attr('id')].refresh();
          // Update the filter count
          var filter = self.container.find('.notificationPreferenceScopeCount');
          var filterValue = parseInt(filter.text());
          filter.text(filterValue + 1);
        }).fail(function () {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
        });
      }
    };

    // Call init()
    self.init();
  };

});
</code>
    </property>
    <property>
      <name>Event Type Filter</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>4a8cc54d-4e11-4d29-8f2d-0b868e7e0150</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.notifPreferences tbody {
            margin-top: 2em;
            }
            .notifPreferences .appOdd {
            background: #e5e5e5;
            }
            .notifPreferences .appEven {
            background: #fafafa;
            }
            .notifPreferences .rowApp td, .notifPreferences .rowApp th{
            height: 3em;
            }</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>NotificationPreferencesTable</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>d5a3452c-09c6-4a49-b6bf-290528cd27f0</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.notification-top-panel-preferences {
  display: inline-block;
  width: 100%;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>NotificationPreferencesTopPanel</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
